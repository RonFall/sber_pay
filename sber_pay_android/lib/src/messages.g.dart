// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

/// Тип инициализации сервисов Сбербанка
enum SberPayApiEnv {
  /// Продуктовый режим.
  ///
  /// Для авторизации пользователя происходит редирект в приложение Сбербанка.
  prod,
  /// Режим песочницы.
  ///
  /// Позволяет протестировать оплату как в [prod], но с тестовыми данными.
  sandboxRealBankApp,
  /// Режим песочницы без перехода в банк.
  ///
  /// При авторизации пользователя не осуществляется переход в приложение
  /// Сбербанка.
  sandboxWithoutBankApp,
}

/// Статусы оплаты
enum SberPayApiPaymentStatus {
  /// Успешный результат
  success,
  /// Необходимо проверить статус оплаты
  processing,
  /// Пользователь отменил оплату
  cancel,
  /// Неизвестный тип
  unknown,
}

/// Конфигурация инициализации
class InitConfig {
  InitConfig({
    required this.env,
    this.enableBnpl,
  });

  /// Среда запуска
  SberPayApiEnv env;

  /// Использование функционала оплаты частями
  bool? enableBnpl;

  Object encode() {
    return <Object?>[
      env.index,
      enableBnpl,
    ];
  }

  static InitConfig decode(Object result) {
    result as List<Object?>;
    return InitConfig(
      env: SberPayApiEnv.values[result[0]! as int],
      enableBnpl: result[1] as bool?,
    );
  }
}

/// Конфигурация оплаты
class PayConfig {
  PayConfig({
    required this.apiKey,
    required this.merchantLogin,
    required this.bankInvoiceId,
    required this.orderNumber,
  });

  /// Ключ, выдаваемый по договору, либо создаваемый в личном кабинете
  String apiKey;

  /// Логин, выдаваемый по договору, либо создаваемый в личном кабинете
  String merchantLogin;

  /// Уникальный идентификатор заказа, сгенерированный Банком
  String bankInvoiceId;

  /// Номер заказа
  String orderNumber;

  Object encode() {
    return <Object?>[
      apiKey,
      merchantLogin,
      bankInvoiceId,
      orderNumber,
    ];
  }

  static PayConfig decode(Object result) {
    result as List<Object?>;
    return PayConfig(
      apiKey: result[0]! as String,
      merchantLogin: result[1]! as String,
      bankInvoiceId: result[2]! as String,
      orderNumber: result[3]! as String,
    );
  }
}

class _SberPayApiCodec extends StandardMessageCodec {
  const _SberPayApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is InitConfig) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PayConfig) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return InitConfig.decode(readValue(buffer)!);
      case 129: 
        return PayConfig.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class SberPayApi {
  /// Constructor for [SberPayApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SberPayApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _SberPayApiCodec();

  Future<bool> initSberPay(InitConfig config) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.sber_pay_android.SberPayApi.initSberPay';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[config]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<bool> isReadyForSPaySdk() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.sber_pay_android.SberPayApi.isReadyForSPaySdk';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<SberPayApiPaymentStatus> payWithBankInvoiceId(PayConfig config) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.sber_pay_android.SberPayApi.payWithBankInvoiceId';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[config]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return SberPayApiPaymentStatus.values[__pigeon_replyList[0]! as int];
    }
  }
}
