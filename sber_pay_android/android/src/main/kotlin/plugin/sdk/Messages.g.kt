// Autogenerated from Pigeon (v16.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Тип инициализации сервисов Сбербанка */
enum class SberPayApiEnv(val raw: Int) {
  /**
   * Продуктовый режим.
   *
   * Для авторизации пользователя происходит редирект в приложение Сбербанка.
   */
  PROD(0),
  /**
   * Режим песочницы.
   *
   * Позволяет протестировать оплату как в [prod], но с тестовыми данными.
   */
  SANDBOXREALBANKAPP(1),
  /**
   * Режим песочницы без перехода в банк.
   *
   * При авторизации пользователя не осуществляется переход в приложение
   * Сбербанка.
   */
  SANDBOXWITHOUTBANKAPP(2);

  companion object {
    fun ofRaw(raw: Int): SberPayApiEnv? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Статусы оплаты */
enum class SberPayApiPaymentStatus(val raw: Int) {
  /** Успешный результат */
  SUCCESS(0),
  /** Необходимо проверить статус оплаты */
  PROCESSING(1),
  /** Пользователь отменил оплату */
  CANCEL(2),
  /** Неизвестный тип */
  UNKNOWN(3);

  companion object {
    fun ofRaw(raw: Int): SberPayApiPaymentStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Конфигурация инициализации
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class InitConfig (
  /** Среда запуска */
  val env: SberPayApiEnv,
  /** Использование функционала оплаты частями */
  val enableBnpl: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): InitConfig {
      val env = SberPayApiEnv.ofRaw(list[0] as Int)!!
      val enableBnpl = list[1] as Boolean?
      return InitConfig(env, enableBnpl)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      env.raw,
      enableBnpl,
    )
  }
}

/**
 * Конфигурация оплаты
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class PayConfig (
  /** Ключ, выдаваемый по договору, либо создаваемый в личном кабинете */
  val apiKey: String,
  /** Логин, выдаваемый по договору, либо создаваемый в личном кабинете */
  val merchantLogin: String,
  /** Уникальный идентификатор заказа, сгенерированный Банком */
  val bankInvoiceId: String,
  /** Номер заказа */
  val orderNumber: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PayConfig {
      val apiKey = list[0] as String
      val merchantLogin = list[1] as String
      val bankInvoiceId = list[2] as String
      val orderNumber = list[3] as String
      return PayConfig(apiKey, merchantLogin, bankInvoiceId, orderNumber)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      apiKey,
      merchantLogin,
      bankInvoiceId,
      orderNumber,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object SberPayApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InitConfig.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PayConfig.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is InitConfig -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is PayConfig -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface SberPayApi {
  fun initSberPay(config: InitConfig): Boolean
  fun isReadyForSPaySdk(): Boolean
  fun payWithBankInvoiceId(config: PayConfig, callback: (Result<SberPayApiPaymentStatus>) -> Unit)

  companion object {
    /** The codec used by SberPayApi. */
    val codec: MessageCodec<Any?> by lazy {
      SberPayApiCodec
    }
    /** Sets up an instance of `SberPayApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: SberPayApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sber_pay_android.SberPayApi.initSberPay", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as InitConfig
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.initSberPay(configArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sber_pay_android.SberPayApi.isReadyForSPaySdk", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isReadyForSPaySdk())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.sber_pay_android.SberPayApi.payWithBankInvoiceId", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as PayConfig
            api.payWithBankInvoiceId(configArg) { result: Result<SberPayApiPaymentStatus> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data!!.raw))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
